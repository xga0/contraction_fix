name: Publish to PyPI (Manual/Tag)

on:
  workflow_dispatch:  # Allows manual trigger
    inputs:
      skip_tests:
        description: 'Skip tests before publishing'
        required: false
        default: false
        type: boolean
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v0.2.1, etc.

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest
    
    - name: Run tests
      run: |
        if [ -f tests/test_fixer.py ]; then
          python -m pytest tests/ -v
        else
          python -c "import contraction_fix; print('Package imports successfully')"
        fi

  deploy:
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Check if version already exists on PyPI
      run: |
        VERSION=$(python setup.py --version)
        echo "Checking if version $VERSION already exists..."
        if pip index versions contraction-fix | grep -q "Available versions: $VERSION"; then
          echo "⚠️  Version $VERSION already exists on PyPI!"
          echo "Please update the version in setup.py before publishing."
          exit 1
        else
          echo "✅ Version $VERSION is new, proceeding with publication."
        fi
    
    - name: Publish to PyPI (Trusted Publishing)
      uses: pypa/gh-action-pypi-publish@release/v1
      continue-on-error: true
      id: trusted_publish
    
    - name: Publish to PyPI (API Token)
      if: steps.trusted_publish.outcome == 'failure'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }} 